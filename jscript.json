// --- M√®o ---
const cat = document.getElementById("cat");
const bubble = document.getElementById("cat-talk");
let isBubbleVisible = false;

cat.addEventListener("click", () => {
  if (!isBubbleVisible) {
    bubble.classList.add("show");
    bubble.textContent = "Meowww I miss you!";
    isBubbleVisible = true;
  }
});

document.addEventListener("click", (event) => {
  if (!cat.contains(event.target) && !bubble.contains(event.target)) {
    bubble.classList.remove("show");
    isBubbleVisible = false;
  }
});

bubble.addEventListener("click", (event) => {
  event.stopPropagation();
});

// --- Th·ªè ---
const rabbit = document.getElementById("rabbit");
rabbit.addEventListener("click", () => {
  rabbit.classList.add("hopping");
  rabbit.addEventListener("animationend", () => {
    rabbit.classList.remove("hopping");
  });
});


const overlay = document.getElementById("overlay");

function startGame() {
  overlay.classList.add("active"); // ch·ªâ show overlay
}

function closeOverlay() {
  overlay.classList.remove("active"); // ch·ªâ hide overlay
}

overlay.addEventListener("click", function (e) {
  if (e.target === overlay) {
    closeOverlay();
  }
});

// M√¥ ph·ªèng hi·ªáu ·ª©ng g√µ tin nh·∫Øn
function typeMessage(message, className) {
  let chatBody = document.getElementById('chatBody');
  let messageDiv = document.createElement('div'); // T·∫°o m·ªôt ph·∫ßn t·ª≠ m·ªõi cho tin nh·∫Øn
  messageDiv.classList.add('chat-message', className);
   // Th√™m class cho tin nh·∫Øn
  chatBody.appendChild(messageDiv); // Th√™m v√†o chatBody
  let i = 0;
  let interval = setInterval(() => {
    messageDiv.innerHTML += message.charAt(i);  // Hi·ªÉn th·ªã t·ª´ng k√Ω t·ª±
    chatBody.scrollTop = chatBody.scrollHeight; // Cu·ªôn xu·ªëng cu·ªëi c√πng
    i++;
    if (i === message.length) {
      clearInterval(interval); // D·ª´ng khi g√µ xong
      showOptions(); // Hi·ªÉn th·ªã c√°c l·ª±a ch·ªçn
    }
  }, 50); // ƒêi·ªÅu ch·ªânh t·ªëc ƒë·ªô g√µ
}

// Hi·ªÉn th·ªã c√°c l·ª±a ch·ªçn (ucii, hongg, ƒë∆∞·ª£c)
function showOptions() {
  document.getElementById('chatOptions').style.display = 'flex';
}

function sendOptionMessage1() {
    document.getElementById('chatOptions').style.display = 'none';

    let chatBody = document.getElementById('chatBody');
    chatBody.innerHTML += `
        <div class="chat-message from-me">T·ªõ r√πii</div>
    `;
    chatBody.scrollTop = chatBody.scrollHeight; 
    setTimeout(() => {
        chatBody.innerHTML += `
            <div class="chat-message from-them">T·ª•i t·ªõ xin c√£m ∆∞n c·∫≠u nh√¨u nhoaa</div>
        `;
        chatBody.scrollTop = chatBody.scrollHeight;
        setTimeout(() => {    
            chatBody.innerHTML += `
                <div class="chat-message from-them">T·ª•i t·ªõ xin t·∫∑ng c·∫≠u 1 l∆∞·ª£t quay siu siu may m·∫Øn</div>
            `;
            chatBody.scrollTop = chatBody.scrollHeight; 
            setTimeout(() => {
                // Tin nh·∫Øn th·ª© t∆∞
                chatBody.innerHTML += `
                    <div class="chat-message from-them">Ho·∫∑c hong =))</div>
                `;
                chatBody.scrollTop = chatBody.scrollHeight; 
            }, 3000); 

        }, 1900); 
    }, 400); 
}


function sendOptionMessage2() {
    document.getElementById('chatOptions').style.display = 'none';

    let chatBody = document.getElementById('chatBody');
    chatBody.innerHTML += `
        <div class="chat-message from-me">T·ªõ ch∆∞aaa</div>
    `;
    chatBody.scrollTop = chatBody.scrollHeight; 
    setTimeout(() => {
        chatBody.innerHTML += `
            <div class="chat-message from-them">Uii, t·∫°i sao c·∫≠u ch∆∞a th·ª≠ ƒëii, ngon l·∫Øm lun √≥o ü•∫</div>
        `;
        chatBody.scrollTop = chatBody.scrollHeight;
        setTimeout(() => {    
            chatBody.innerHTML += `
                <div class="chat-message from-them">Hay c·∫≠u hong mua ƒë∆∞·ª£c h·ªßm, g·ª≠i stk t·ªõ ting ting cho m√† th·ª≠</div>
            `;
            chatBody.scrollTop = chatBody.scrollHeight; 
            setTimeout(() => {

                chatBody.innerHTML += `
                    <div class="chat-message from-them">C·∫≠u inbox stk qua page ngay nh√≥ </div>
                `;
                chatBody.scrollTop = chatBody.scrollHeight; // Cu·ªôn xu·ªëng d∆∞·ªõi
                  setTimeout(() => {
                    chatBody.innerHTML += `
                    <div class="chat-message from-them">ƒê·ª´ng ƒë·ªÉ t·ªõ ph·∫£i gia tr∆∞·ªüng üôÑ</div>
                `;
                chatBody.scrollTop = chatBody.scrollHeight;
                                  }, 2000);
            }, 2000); 

        }, 2000); 
    }, 1000); 
}


function sendOptionMessage3() {
    let chatBody = document.getElementById('chatBody');
    chatBody.innerHTML += `
        <div class="chat-message from-me">Hehehehe</div>
    `;
    setTimeout(() => {
        typeMessage("ƒê∆∞·ª£c r·ªìi! C·∫≠u quay gi√∫p ƒëi.", 'from-them');
    }, 500);
    

    document.getElementById('chatOptions').style.display = 'none';
}

window.onload = () => {
  let chatBody = document.getElementById('chatBody');
  setTimeout(() => {
      chatBody.innerHTML += `
        <div class="chat-message from-them">Heluu, cho t·ªõ h·ªèi c·∫≠u ƒë√£ th∆∞·ªüng th·ª©c s·ªØa chua c·ªßa t·ª•i t·ªõ ch∆∞a ·∫°aa</div>
    `;
}, 1000);
};

const wheel = document.getElementById('wheel');
const segments = document.querySelectorAll('.segment');
const SEG_COUNT = segments.length;
let currentRotation = 0;
let isSpinning = false;

function spinWheel() {
  if (!wheel) return;
  if (isSpinning) return;
  isSpinning = true;

  // quay th√™m 5..8 v√≤ng + g√≥c random 0..359
  const extra = Math.floor(Math.random() * 360) + 360 * (5 + Math.floor(Math.random() * 4));
  currentRotation += extra;

  wheel.style.transition = 'transform 4.5s cubic-bezier(.22,.9,.12,1)';
  wheel.style.transform = `rotate(${currentRotation}deg)`;

  wheel.addEventListener('transitionend', onSpinEnd, { once: true });
}

function onSpinEnd() {
  const finalDeg = currentRotation % 360;
  const segAngle = 360 / SEG_COUNT;


  let angleAtTop = (360 - finalDeg) % 360;
  let index = Math.floor(angleAtTop / segAngle);
  index = (index + SEG_COUNT) % SEG_COUNT;

  const chosen = segments[index] ? segments[index].textContent.trim() : '???';

  setTimeout(() => {
    alert(`B·∫°n tr√∫ng: ${chosen}`);
    isSpinning = false;
  }, 200);
}
